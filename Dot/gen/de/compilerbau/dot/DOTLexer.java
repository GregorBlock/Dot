// Generated from C:\Users\Gregor Block\Studium\git\Dot\Dot\src/de/compilerbau/dot/DOT.g4 by ANTLR 4.1
    
package de.compilerbau.dot;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DOTLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__33=1, T__32=2, T__31=3, T__30=4, T__29=5, T__28=6, T__27=7, T__26=8, 
		T__25=9, T__24=10, T__23=11, T__22=12, T__21=13, T__20=14, T__19=15, T__18=16, 
		T__17=17, T__16=18, T__15=19, T__14=20, T__13=21, T__12=22, T__11=23, 
		T__10=24, T__9=25, T__8=26, T__7=27, T__6=28, T__5=29, T__4=30, T__3=31, 
		T__2=32, T__1=33, T__0=34, STRICT=35, GRAPH=36, DIGRAPH=37, NODE=38, EDGE=39, 
		SUBGRAPH=40, UNCOVER=41, ONLY=42, NUMBER=43, STRING=44, ID=45, HTML_STRING=46, 
		COMMENT=47, LINE_COMMENT=48, PREPROC=49, WS=50;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'long'", "'short'", "']'", "','", "'while'", "'-'", "'['", "':'", "'('", 
		"'if'", "'int'", "'--'", "'<'", "'!='", "'{'", "'double'", "'else'", "'boolean'", 
		"'}'", "'float'", "'++'", "'char'", "'do'", "'->'", "'byte'", "')'", "'for'", 
		"'='", "'String'", "';'", "'&&'", "'||'", "'>'", "'=='", "STRICT", "GRAPH", 
		"DIGRAPH", "NODE", "EDGE", "SUBGRAPH", "UNCOVER", "ONLY", "NUMBER", "STRING", 
		"ID", "HTML_STRING", "COMMENT", "LINE_COMMENT", "PREPROC", "WS"
	};
	public static final String[] ruleNames = {
		"T__33", "T__32", "T__31", "T__30", "T__29", "T__28", "T__27", "T__26", 
		"T__25", "T__24", "T__23", "T__22", "T__21", "T__20", "T__19", "T__18", 
		"T__17", "T__16", "T__15", "T__14", "T__13", "T__12", "T__11", "T__10", 
		"T__9", "T__8", "T__7", "T__6", "T__5", "T__4", "T__3", "T__2", "T__1", 
		"T__0", "STRICT", "GRAPH", "DIGRAPH", "NODE", "EDGE", "SUBGRAPH", "UNCOVER", 
		"ONLY", "NUMBER", "DIGIT", "STRING", "ID", "LETTER", "HTML_STRING", "TAG", 
		"COMMENT", "LINE_COMMENT", "PREPROC", "WS"
	};


	public DOTLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "DOT.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 49: COMMENT_action((RuleContext)_localctx, actionIndex); break;

		case 50: LINE_COMMENT_action((RuleContext)_localctx, actionIndex); break;

		case 51: PREPROC_action((RuleContext)_localctx, actionIndex); break;

		case 52: WS_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void PREPROC_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: skip();  break;
		}
	}
	private void WS_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 3: skip();  break;
		}
	}
	private void LINE_COMMENT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: skip();  break;
		}
	}
	private void COMMENT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: skip();  break;
		}
	}

	public static final String _serializedATN =
		"\3\uacf5\uee8c\u4f5d\u8b0d\u4a45\u78bd\u1b2f\u3378\2\64\u018e\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64"+
		"\t\64\4\65\t\65\4\66\t\66\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3"+
		"\n\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\17\3\17\3\17"+
		"\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22"+
		"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\25\3\25\3\25\3\25"+
		"\3\25\3\25\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\31"+
		"\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\34\3\34\3\34\3\34\3\35"+
		"\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3 \3 \3 \3!\3!\3!\3"+
		"\"\3\"\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&"+
		"\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3)\3)\3"+
		")\3*\3*\3*\3*\3*\3*\3*\3*\3+\3+\3+\3+\3+\3,\5,\u011d\n,\3,\3,\6,\u0121"+
		"\n,\r,\16,\u0122\3,\6,\u0126\n,\r,\16,\u0127\3,\3,\7,\u012c\n,\f,\16,"+
		"\u012f\13,\5,\u0131\n,\5,\u0133\n,\3-\3-\3.\3.\3.\3.\7.\u013b\n.\f.\16"+
		".\u013e\13.\3.\3.\3/\3/\3/\7/\u0145\n/\f/\16/\u0148\13/\3\60\3\60\3\61"+
		"\3\61\3\61\7\61\u014f\n\61\f\61\16\61\u0152\13\61\3\61\3\61\3\62\3\62"+
		"\7\62\u0158\n\62\f\62\16\62\u015b\13\62\3\62\3\62\3\63\3\63\3\63\3\63"+
		"\7\63\u0163\n\63\f\63\16\63\u0166\13\63\3\63\3\63\3\63\3\63\3\63\3\64"+
		"\3\64\3\64\3\64\7\64\u0171\n\64\f\64\16\64\u0174\13\64\3\64\5\64\u0177"+
		"\n\64\3\64\3\64\3\64\3\64\3\65\3\65\7\65\u017f\n\65\f\65\16\65\u0182\13"+
		"\65\3\65\3\65\3\65\3\65\3\66\6\66\u0189\n\66\r\66\16\66\u018a\3\66\3\66"+
		"\7\u013c\u0159\u0164\u0172\u0180\67\3\3\1\5\4\1\7\5\1\t\6\1\13\7\1\r\b"+
		"\1\17\t\1\21\n\1\23\13\1\25\f\1\27\r\1\31\16\1\33\17\1\35\20\1\37\21\1"+
		"!\22\1#\23\1%\24\1\'\25\1)\26\1+\27\1-\30\1/\31\1\61\32\1\63\33\1\65\34"+
		"\1\67\35\19\36\1;\37\1= \1?!\1A\"\1C#\1E$\1G%\1I&\1K\'\1M(\1O)\1Q*\1S"+
		"+\1U,\1W-\1Y\2\1[.\1]/\1_\2\1a\60\1c\2\1e\61\2g\62\3i\63\4k\64\5\3\2\30"+
		"\4\2UUuu\4\2VVvv\4\2TTtt\4\2KKkk\4\2EEee\4\2IIii\4\2CCcc\4\2RRrr\4\2J"+
		"Jjj\4\2FFff\4\2PPpp\4\2QQqq\4\2GGgg\4\2WWww\4\2DDdd\4\2XXxx\4\2NNnn\4"+
		"\2[[{{\3\2\62;\6\2C\\aac|\u0082\u0101\4\2>>@@\5\2\13\f\17\17\"\"\u019c"+
		"\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2"+
		"\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2"+
		"\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2"+
		"\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2"+
		"\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3"+
		"\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2"+
		"\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2"+
		"U\3\2\2\2\2W\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2a\3\2\2\2\2e\3\2\2\2\2g\3"+
		"\2\2\2\2i\3\2\2\2\2k\3\2\2\2\3m\3\2\2\2\5r\3\2\2\2\7x\3\2\2\2\tz\3\2\2"+
		"\2\13|\3\2\2\2\r\u0082\3\2\2\2\17\u0084\3\2\2\2\21\u0086\3\2\2\2\23\u0088"+
		"\3\2\2\2\25\u008a\3\2\2\2\27\u008d\3\2\2\2\31\u0091\3\2\2\2\33\u0094\3"+
		"\2\2\2\35\u0096\3\2\2\2\37\u0099\3\2\2\2!\u009b\3\2\2\2#\u00a2\3\2\2\2"+
		"%\u00a7\3\2\2\2\'\u00af\3\2\2\2)\u00b1\3\2\2\2+\u00b7\3\2\2\2-\u00ba\3"+
		"\2\2\2/\u00bf\3\2\2\2\61\u00c2\3\2\2\2\63\u00c5\3\2\2\2\65\u00ca\3\2\2"+
		"\2\67\u00cc\3\2\2\29\u00d0\3\2\2\2;\u00d2\3\2\2\2=\u00d9\3\2\2\2?\u00db"+
		"\3\2\2\2A\u00de\3\2\2\2C\u00e1\3\2\2\2E\u00e3\3\2\2\2G\u00e6\3\2\2\2I"+
		"\u00ed\3\2\2\2K\u00f3\3\2\2\2M\u00fb\3\2\2\2O\u0100\3\2\2\2Q\u0105\3\2"+
		"\2\2S\u010e\3\2\2\2U\u0116\3\2\2\2W\u011c\3\2\2\2Y\u0134\3\2\2\2[\u0136"+
		"\3\2\2\2]\u0141\3\2\2\2_\u0149\3\2\2\2a\u014b\3\2\2\2c\u0155\3\2\2\2e"+
		"\u015e\3\2\2\2g\u016c\3\2\2\2i\u017c\3\2\2\2k\u0188\3\2\2\2mn\7n\2\2n"+
		"o\7q\2\2op\7p\2\2pq\7i\2\2q\4\3\2\2\2rs\7u\2\2st\7j\2\2tu\7q\2\2uv\7t"+
		"\2\2vw\7v\2\2w\6\3\2\2\2xy\7_\2\2y\b\3\2\2\2z{\7.\2\2{\n\3\2\2\2|}\7y"+
		"\2\2}~\7j\2\2~\177\7k\2\2\177\u0080\7n\2\2\u0080\u0081\7g\2\2\u0081\f"+
		"\3\2\2\2\u0082\u0083\7/\2\2\u0083\16\3\2\2\2\u0084\u0085\7]\2\2\u0085"+
		"\20\3\2\2\2\u0086\u0087\7<\2\2\u0087\22\3\2\2\2\u0088\u0089\7*\2\2\u0089"+
		"\24\3\2\2\2\u008a\u008b\7k\2\2\u008b\u008c\7h\2\2\u008c\26\3\2\2\2\u008d"+
		"\u008e\7k\2\2\u008e\u008f\7p\2\2\u008f\u0090\7v\2\2\u0090\30\3\2\2\2\u0091"+
		"\u0092\7/\2\2\u0092\u0093\7/\2\2\u0093\32\3\2\2\2\u0094\u0095\7>\2\2\u0095"+
		"\34\3\2\2\2\u0096\u0097\7#\2\2\u0097\u0098\7?\2\2\u0098\36\3\2\2\2\u0099"+
		"\u009a\7}\2\2\u009a \3\2\2\2\u009b\u009c\7f\2\2\u009c\u009d\7q\2\2\u009d"+
		"\u009e\7w\2\2\u009e\u009f\7d\2\2\u009f\u00a0\7n\2\2\u00a0\u00a1\7g\2\2"+
		"\u00a1\"\3\2\2\2\u00a2\u00a3\7g\2\2\u00a3\u00a4\7n\2\2\u00a4\u00a5\7u"+
		"\2\2\u00a5\u00a6\7g\2\2\u00a6$\3\2\2\2\u00a7\u00a8\7d\2\2\u00a8\u00a9"+
		"\7q\2\2\u00a9\u00aa\7q\2\2\u00aa\u00ab\7n\2\2\u00ab\u00ac\7g\2\2\u00ac"+
		"\u00ad\7c\2\2\u00ad\u00ae\7p\2\2\u00ae&\3\2\2\2\u00af\u00b0\7\177\2\2"+
		"\u00b0(\3\2\2\2\u00b1\u00b2\7h\2\2\u00b2\u00b3\7n\2\2\u00b3\u00b4\7q\2"+
		"\2\u00b4\u00b5\7c\2\2\u00b5\u00b6\7v\2\2\u00b6*\3\2\2\2\u00b7\u00b8\7"+
		"-\2\2\u00b8\u00b9\7-\2\2\u00b9,\3\2\2\2\u00ba\u00bb\7e\2\2\u00bb\u00bc"+
		"\7j\2\2\u00bc\u00bd\7c\2\2\u00bd\u00be\7t\2\2\u00be.\3\2\2\2\u00bf\u00c0"+
		"\7f\2\2\u00c0\u00c1\7q\2\2\u00c1\60\3\2\2\2\u00c2\u00c3\7/\2\2\u00c3\u00c4"+
		"\7@\2\2\u00c4\62\3\2\2\2\u00c5\u00c6\7d\2\2\u00c6\u00c7\7{\2\2\u00c7\u00c8"+
		"\7v\2\2\u00c8\u00c9\7g\2\2\u00c9\64\3\2\2\2\u00ca\u00cb\7+\2\2\u00cb\66"+
		"\3\2\2\2\u00cc\u00cd\7h\2\2\u00cd\u00ce\7q\2\2\u00ce\u00cf\7t\2\2\u00cf"+
		"8\3\2\2\2\u00d0\u00d1\7?\2\2\u00d1:\3\2\2\2\u00d2\u00d3\7U\2\2\u00d3\u00d4"+
		"\7v\2\2\u00d4\u00d5\7t\2\2\u00d5\u00d6\7k\2\2\u00d6\u00d7\7p\2\2\u00d7"+
		"\u00d8\7i\2\2\u00d8<\3\2\2\2\u00d9\u00da\7=\2\2\u00da>\3\2\2\2\u00db\u00dc"+
		"\7(\2\2\u00dc\u00dd\7(\2\2\u00dd@\3\2\2\2\u00de\u00df\7~\2\2\u00df\u00e0"+
		"\7~\2\2\u00e0B\3\2\2\2\u00e1\u00e2\7@\2\2\u00e2D\3\2\2\2\u00e3\u00e4\7"+
		"?\2\2\u00e4\u00e5\7?\2\2\u00e5F\3\2\2\2\u00e6\u00e7\t\2\2\2\u00e7\u00e8"+
		"\t\3\2\2\u00e8\u00e9\t\4\2\2\u00e9\u00ea\t\5\2\2\u00ea\u00eb\t\6\2\2\u00eb"+
		"\u00ec\t\3\2\2\u00ecH\3\2\2\2\u00ed\u00ee\t\7\2\2\u00ee\u00ef\t\4\2\2"+
		"\u00ef\u00f0\t\b\2\2\u00f0\u00f1\t\t\2\2\u00f1\u00f2\t\n\2\2\u00f2J\3"+
		"\2\2\2\u00f3\u00f4\t\13\2\2\u00f4\u00f5\t\5\2\2\u00f5\u00f6\t\7\2\2\u00f6"+
		"\u00f7\t\4\2\2\u00f7\u00f8\t\b\2\2\u00f8\u00f9\t\t\2\2\u00f9\u00fa\t\n"+
		"\2\2\u00faL\3\2\2\2\u00fb\u00fc\t\f\2\2\u00fc\u00fd\t\r\2\2\u00fd\u00fe"+
		"\t\13\2\2\u00fe\u00ff\t\16\2\2\u00ffN\3\2\2\2\u0100\u0101\t\16\2\2\u0101"+
		"\u0102\t\13\2\2\u0102\u0103\t\7\2\2\u0103\u0104\t\16\2\2\u0104P\3\2\2"+
		"\2\u0105\u0106\t\2\2\2\u0106\u0107\t\17\2\2\u0107\u0108\t\20\2\2\u0108"+
		"\u0109\t\7\2\2\u0109\u010a\t\4\2\2\u010a\u010b\t\b\2\2\u010b\u010c\t\t"+
		"\2\2\u010c\u010d\t\n\2\2\u010dR\3\2\2\2\u010e\u010f\t\17\2\2\u010f\u0110"+
		"\t\f\2\2\u0110\u0111\t\6\2\2\u0111\u0112\t\r\2\2\u0112\u0113\t\21\2\2"+
		"\u0113\u0114\t\16\2\2\u0114\u0115\t\4\2\2\u0115T\3\2\2\2\u0116\u0117\t"+
		"\r\2\2\u0117\u0118\t\f\2\2\u0118\u0119\t\22\2\2\u0119\u011a\t\23\2\2\u011a"+
		"V\3\2\2\2\u011b\u011d\7/\2\2\u011c\u011b\3\2\2\2\u011c\u011d\3\2\2\2\u011d"+
		"\u0132\3\2\2\2\u011e\u0120\7\60\2\2\u011f\u0121\5Y-\2\u0120\u011f\3\2"+
		"\2\2\u0121\u0122\3\2\2\2\u0122\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123"+
		"\u0133\3\2\2\2\u0124\u0126\5Y-\2\u0125\u0124\3\2\2\2\u0126\u0127\3\2\2"+
		"\2\u0127\u0125\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u0130\3\2\2\2\u0129\u012d"+
		"\7\60\2\2\u012a\u012c\5Y-\2\u012b\u012a\3\2\2\2\u012c\u012f\3\2\2\2\u012d"+
		"\u012b\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u0131\3\2\2\2\u012f\u012d\3\2"+
		"\2\2\u0130\u0129\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0133\3\2\2\2\u0132"+
		"\u011e\3\2\2\2\u0132\u0125\3\2\2\2\u0133X\3\2\2\2\u0134\u0135\t\24\2\2"+
		"\u0135Z\3\2\2\2\u0136\u013c\7$\2\2\u0137\u0138\7^\2\2\u0138\u013b\7$\2"+
		"\2\u0139\u013b\13\2\2\2\u013a\u0137\3\2\2\2\u013a\u0139\3\2\2\2\u013b"+
		"\u013e\3\2\2\2\u013c\u013d\3\2\2\2\u013c\u013a\3\2\2\2\u013d\u013f\3\2"+
		"\2\2\u013e\u013c\3\2\2\2\u013f\u0140\7$\2\2\u0140\\\3\2\2\2\u0141\u0146"+
		"\5_\60\2\u0142\u0145\5_\60\2\u0143\u0145\5Y-\2\u0144\u0142\3\2\2\2\u0144"+
		"\u0143\3\2\2\2\u0145\u0148\3\2\2\2\u0146\u0144\3\2\2\2\u0146\u0147\3\2"+
		"\2\2\u0147^\3\2\2\2\u0148\u0146\3\2\2\2\u0149\u014a\t\25\2\2\u014a`\3"+
		"\2\2\2\u014b\u0150\7>\2\2\u014c\u014f\5c\62\2\u014d\u014f\n\26\2\2\u014e"+
		"\u014c\3\2\2\2\u014e\u014d\3\2\2\2\u014f\u0152\3\2\2\2\u0150\u014e\3\2"+
		"\2\2\u0150\u0151\3\2\2\2\u0151\u0153\3\2\2\2\u0152\u0150\3\2\2\2\u0153"+
		"\u0154\7@\2\2\u0154b\3\2\2\2\u0155\u0159\7>\2\2\u0156\u0158\13\2\2\2\u0157"+
		"\u0156\3\2\2\2\u0158\u015b\3\2\2\2\u0159\u015a\3\2\2\2\u0159\u0157\3\2"+
		"\2\2\u015a\u015c\3\2\2\2\u015b\u0159\3\2\2\2\u015c\u015d\7@\2\2\u015d"+
		"d\3\2\2\2\u015e\u015f\7\61\2\2\u015f\u0160\7,\2\2\u0160\u0164\3\2\2\2"+
		"\u0161\u0163\13\2\2\2\u0162\u0161\3\2\2\2\u0163\u0166\3\2\2\2\u0164\u0165"+
		"\3\2\2\2\u0164\u0162\3\2\2\2\u0165\u0167\3\2\2\2\u0166\u0164\3\2\2\2\u0167"+
		"\u0168\7,\2\2\u0168\u0169\7\61\2\2\u0169\u016a\3\2\2\2\u016a\u016b\b\63"+
		"\2\2\u016bf\3\2\2\2\u016c\u016d\7\61\2\2\u016d\u016e\7\61\2\2\u016e\u0172"+
		"\3\2\2\2\u016f\u0171\13\2\2\2\u0170\u016f\3\2\2\2\u0171\u0174\3\2\2\2"+
		"\u0172\u0173\3\2\2\2\u0172\u0170\3\2\2\2\u0173\u0176\3\2\2\2\u0174\u0172"+
		"\3\2\2\2\u0175\u0177\7\17\2\2\u0176\u0175\3\2\2\2\u0176\u0177\3\2\2\2"+
		"\u0177\u0178\3\2\2\2\u0178\u0179\7\f\2\2\u0179\u017a\3\2\2\2\u017a\u017b"+
		"\b\64\3\2\u017bh\3\2\2\2\u017c\u0180\7%\2\2\u017d\u017f\13\2\2\2\u017e"+
		"\u017d\3\2\2\2\u017f\u0182\3\2\2\2\u0180\u0181\3\2\2\2\u0180\u017e\3\2"+
		"\2\2\u0181\u0183\3\2\2\2\u0182\u0180\3\2\2\2\u0183\u0184\7\f\2\2\u0184"+
		"\u0185\3\2\2\2\u0185\u0186\b\65\4\2\u0186j\3\2\2\2\u0187\u0189\t\27\2"+
		"\2\u0188\u0187\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u0188\3\2\2\2\u018a\u018b"+
		"\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u018d\b\66\5\2\u018dl\3\2\2\2\25\2"+
		"\u011c\u0122\u0127\u012d\u0130\u0132\u013a\u013c\u0144\u0146\u014e\u0150"+
		"\u0159\u0164\u0172\u0176\u0180\u018a";
	public static final ATN _ATN =
		ATNSimulator.deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}