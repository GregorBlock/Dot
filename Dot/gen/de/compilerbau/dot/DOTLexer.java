// Generated from E:\eclipse\git_repo\Dot\Dot\src/de/compilerbau/dot/DOT.g4 by ANTLR 4.1
    
package de.compilerbau.dot;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DOTLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__5=1, T__4=2, T__3=3, T__2=4, T__1=5, T__0=6, INC=7, DEC=8, OR=9, AND=10, 
		EQ=11, NEQ=12, GT=13, LT=14, GTEQ=15, LTEQ=16, PLUS=17, MINUS=18, MULT=19, 
		DIV=20, MOD=21, POW=22, NOT=23, SCOL=24, ASSIGN=25, OPAR=26, CPAR=27, 
		OBRACE=28, CBRACE=29, TRUE=30, FALSE=31, IF=32, ELSE=33, WHILE=34, FOR=35, 
		INTTYPE=36, FlOATTYPE=37, STRINGTYPE=38, STRICT=39, GRAPH=40, DIGRAPH=41, 
		NODE=42, EDGE=43, SUBGRAPH=44, UNCOVER=45, ONLY=46, IDENTIFIER=47, INT=48, 
		FLOAT=49, NUMBER=50, STRING=51, COMMENT=52, LINE_COMMENT=53, WS=54;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'->'", "']'", "'to'", "','", "'['", "':'", "INC", "'--'", "'||'", "'&&'", 
		"'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'^'", "'!'", "';'", "'='", "'('", "')'", "'{'", "'}'", "'true'", 
		"'false'", "'if'", "'else'", "'while'", "'for'", "'int'", "'float'", "'String'", 
		"STRICT", "GRAPH", "DIGRAPH", "NODE", "EDGE", "SUBGRAPH", "UNCOVER", "ONLY", 
		"IDENTIFIER", "INT", "FLOAT", "NUMBER", "STRING", "COMMENT", "LINE_COMMENT", 
		"WS"
	};
	public static final String[] ruleNames = {
		"T__5", "T__4", "T__3", "T__2", "T__1", "T__0", "INC", "DEC", "OR", "AND", 
		"EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", "PLUS", "MINUS", "MULT", "DIV", 
		"MOD", "POW", "NOT", "SCOL", "ASSIGN", "OPAR", "CPAR", "OBRACE", "CBRACE", 
		"TRUE", "FALSE", "IF", "ELSE", "WHILE", "FOR", "INTTYPE", "FlOATTYPE", 
		"STRINGTYPE", "STRICT", "GRAPH", "DIGRAPH", "NODE", "EDGE", "SUBGRAPH", 
		"UNCOVER", "ONLY", "IDENTIFIER", "INT", "FLOAT", "NUMBER", "DIGIT", "STRING", 
		"LETTER", "COMMENT", "LINE_COMMENT", "WS"
	};


	public DOTLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "DOT.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 53: COMMENT_action((RuleContext)_localctx, actionIndex); break;

		case 54: LINE_COMMENT_action((RuleContext)_localctx, actionIndex); break;

		case 55: WS_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void WS_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: _channel = HIDDEN;  break;
		}
	}
	private void LINE_COMMENT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: _channel = HIDDEN;  break;
		}
	}
	private void COMMENT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: _channel = HIDDEN;  break;
		}
	}

	public static final String _serializedATN =
		"\3\uacf5\uee8c\u4f5d\u8b0d\u4a45\u78bd\u1b2f\u3378\28\u0190\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\3\2\3\2\3\2\3\3\3\3\3\4"+
		"\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\n\3"+
		"\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3"+
		"\20\3\21\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3"+
		"\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3"+
		"\36\3\36\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3!\3!\3!\3\"\3\"\3"+
		"\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3%\3%\3%\3%\3&\3&\3&\3&\3&\3"+
		"&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3"+
		"*\3*\3*\3*\3*\3*\3*\3*\3+\3+\3+\3+\3+\3,\3,\3,\3,\3,\3-\3-\3-\3-\3-\3"+
		"-\3-\3-\3-\3.\3.\3.\3.\3.\3.\3.\3.\3/\3/\3/\3/\3/\3\60\3\60\7\60\u011d"+
		"\n\60\f\60\16\60\u0120\13\60\3\61\5\61\u0123\n\61\3\61\6\61\u0126\n\61"+
		"\r\61\16\61\u0127\3\62\5\62\u012b\n\62\3\62\6\62\u012e\n\62\r\62\16\62"+
		"\u012f\3\62\3\62\7\62\u0134\n\62\f\62\16\62\u0137\13\62\3\62\5\62\u013a"+
		"\n\62\3\62\3\62\6\62\u013e\n\62\r\62\16\62\u013f\5\62\u0142\n\62\3\63"+
		"\5\63\u0145\n\63\3\63\3\63\6\63\u0149\n\63\r\63\16\63\u014a\3\63\6\63"+
		"\u014e\n\63\r\63\16\63\u014f\3\63\3\63\7\63\u0154\n\63\f\63\16\63\u0157"+
		"\13\63\5\63\u0159\n\63\5\63\u015b\n\63\3\64\3\64\3\65\3\65\3\65\3\65\7"+
		"\65\u0163\n\65\f\65\16\65\u0166\13\65\3\65\3\65\3\66\3\66\3\67\3\67\3"+
		"\67\3\67\7\67\u0170\n\67\f\67\16\67\u0173\13\67\3\67\3\67\3\67\3\67\3"+
		"\67\38\38\38\38\78\u017e\n8\f8\168\u0181\138\38\58\u0184\n8\38\38\38\3"+
		"8\39\69\u018b\n9\r9\169\u018c\39\39\5\u0164\u0171\u017f:\3\3\1\5\4\1\7"+
		"\5\1\t\6\1\13\7\1\r\b\1\17\t\1\21\n\1\23\13\1\25\f\1\27\r\1\31\16\1\33"+
		"\17\1\35\20\1\37\21\1!\22\1#\23\1%\24\1\'\25\1)\26\1+\27\1-\30\1/\31\1"+
		"\61\32\1\63\33\1\65\34\1\67\35\19\36\1;\37\1= \1?!\1A\"\1C#\1E$\1G%\1"+
		"I&\1K\'\1M(\1O)\1Q*\1S+\1U,\1W-\1Y.\1[/\1]\60\1_\61\1a\62\1c\63\1e\64"+
		"\1g\2\1i\65\1k\2\1m\66\2o\67\3q8\4\3\2\31\4\2UUuu\4\2VVvv\4\2TTtt\4\2"+
		"KKkk\4\2EEee\4\2IIii\4\2CCcc\4\2RRrr\4\2JJjj\4\2FFff\4\2PPpp\4\2QQqq\4"+
		"\2GGgg\4\2WWww\4\2DDdd\4\2XXxx\4\2NNnn\4\2[[{{\5\2C\\aac|\6\2\62;C\\a"+
		"ac|\3\2\62;\6\2C\\aac|\u0082\u0101\5\2\13\f\17\17\"\"\u01a2\2\3\3\2\2"+
		"\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3"+
		"\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2"+
		"\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2"+
		"\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2"+
		"\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3"+
		"\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2"+
		"\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2"+
		"W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3"+
		"\2\2\2\2e\3\2\2\2\2i\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\3s\3\2\2"+
		"\2\5v\3\2\2\2\7x\3\2\2\2\t{\3\2\2\2\13}\3\2\2\2\r\177\3\2\2\2\17\u0081"+
		"\3\2\2\2\21\u0084\3\2\2\2\23\u0087\3\2\2\2\25\u008a\3\2\2\2\27\u008d\3"+
		"\2\2\2\31\u0090\3\2\2\2\33\u0093\3\2\2\2\35\u0095\3\2\2\2\37\u0097\3\2"+
		"\2\2!\u009a\3\2\2\2#\u009d\3\2\2\2%\u009f\3\2\2\2\'\u00a1\3\2\2\2)\u00a3"+
		"\3\2\2\2+\u00a5\3\2\2\2-\u00a7\3\2\2\2/\u00a9\3\2\2\2\61\u00ab\3\2\2\2"+
		"\63\u00ad\3\2\2\2\65\u00af\3\2\2\2\67\u00b1\3\2\2\29\u00b3\3\2\2\2;\u00b5"+
		"\3\2\2\2=\u00b7\3\2\2\2?\u00bc\3\2\2\2A\u00c2\3\2\2\2C\u00c5\3\2\2\2E"+
		"\u00ca\3\2\2\2G\u00d0\3\2\2\2I\u00d4\3\2\2\2K\u00d8\3\2\2\2M\u00de\3\2"+
		"\2\2O\u00e5\3\2\2\2Q\u00ec\3\2\2\2S\u00f2\3\2\2\2U\u00fa\3\2\2\2W\u00ff"+
		"\3\2\2\2Y\u0104\3\2\2\2[\u010d\3\2\2\2]\u0115\3\2\2\2_\u011a\3\2\2\2a"+
		"\u0122\3\2\2\2c\u0141\3\2\2\2e\u0144\3\2\2\2g\u015c\3\2\2\2i\u015e\3\2"+
		"\2\2k\u0169\3\2\2\2m\u016b\3\2\2\2o\u0179\3\2\2\2q\u018a\3\2\2\2st\7/"+
		"\2\2tu\7@\2\2u\4\3\2\2\2vw\7_\2\2w\6\3\2\2\2xy\7v\2\2yz\7q\2\2z\b\3\2"+
		"\2\2{|\7.\2\2|\n\3\2\2\2}~\7]\2\2~\f\3\2\2\2\177\u0080\7<\2\2\u0080\16"+
		"\3\2\2\2\u0081\u0082\7-\2\2\u0082\u0083\7-\2\2\u0083\20\3\2\2\2\u0084"+
		"\u0085\7/\2\2\u0085\u0086\7/\2\2\u0086\22\3\2\2\2\u0087\u0088\7~\2\2\u0088"+
		"\u0089\7~\2\2\u0089\24\3\2\2\2\u008a\u008b\7(\2\2\u008b\u008c\7(\2\2\u008c"+
		"\26\3\2\2\2\u008d\u008e\7?\2\2\u008e\u008f\7?\2\2\u008f\30\3\2\2\2\u0090"+
		"\u0091\7#\2\2\u0091\u0092\7?\2\2\u0092\32\3\2\2\2\u0093\u0094\7@\2\2\u0094"+
		"\34\3\2\2\2\u0095\u0096\7>\2\2\u0096\36\3\2\2\2\u0097\u0098\7@\2\2\u0098"+
		"\u0099\7?\2\2\u0099 \3\2\2\2\u009a\u009b\7>\2\2\u009b\u009c\7?\2\2\u009c"+
		"\"\3\2\2\2\u009d\u009e\7-\2\2\u009e$\3\2\2\2\u009f\u00a0\7/\2\2\u00a0"+
		"&\3\2\2\2\u00a1\u00a2\7,\2\2\u00a2(\3\2\2\2\u00a3\u00a4\7\61\2\2\u00a4"+
		"*\3\2\2\2\u00a5\u00a6\7\'\2\2\u00a6,\3\2\2\2\u00a7\u00a8\7`\2\2\u00a8"+
		".\3\2\2\2\u00a9\u00aa\7#\2\2\u00aa\60\3\2\2\2\u00ab\u00ac\7=\2\2\u00ac"+
		"\62\3\2\2\2\u00ad\u00ae\7?\2\2\u00ae\64\3\2\2\2\u00af\u00b0\7*\2\2\u00b0"+
		"\66\3\2\2\2\u00b1\u00b2\7+\2\2\u00b28\3\2\2\2\u00b3\u00b4\7}\2\2\u00b4"+
		":\3\2\2\2\u00b5\u00b6\7\177\2\2\u00b6<\3\2\2\2\u00b7\u00b8\7v\2\2\u00b8"+
		"\u00b9\7t\2\2\u00b9\u00ba\7w\2\2\u00ba\u00bb\7g\2\2\u00bb>\3\2\2\2\u00bc"+
		"\u00bd\7h\2\2\u00bd\u00be\7c\2\2\u00be\u00bf\7n\2\2\u00bf\u00c0\7u\2\2"+
		"\u00c0\u00c1\7g\2\2\u00c1@\3\2\2\2\u00c2\u00c3\7k\2\2\u00c3\u00c4\7h\2"+
		"\2\u00c4B\3\2\2\2\u00c5\u00c6\7g\2\2\u00c6\u00c7\7n\2\2\u00c7\u00c8\7"+
		"u\2\2\u00c8\u00c9\7g\2\2\u00c9D\3\2\2\2\u00ca\u00cb\7y\2\2\u00cb\u00cc"+
		"\7j\2\2\u00cc\u00cd\7k\2\2\u00cd\u00ce\7n\2\2\u00ce\u00cf\7g\2\2\u00cf"+
		"F\3\2\2\2\u00d0\u00d1\7h\2\2\u00d1\u00d2\7q\2\2\u00d2\u00d3\7t\2\2\u00d3"+
		"H\3\2\2\2\u00d4\u00d5\7k\2\2\u00d5\u00d6\7p\2\2\u00d6\u00d7\7v\2\2\u00d7"+
		"J\3\2\2\2\u00d8\u00d9\7h\2\2\u00d9\u00da\7n\2\2\u00da\u00db\7q\2\2\u00db"+
		"\u00dc\7c\2\2\u00dc\u00dd\7v\2\2\u00ddL\3\2\2\2\u00de\u00df\7U\2\2\u00df"+
		"\u00e0\7v\2\2\u00e0\u00e1\7t\2\2\u00e1\u00e2\7k\2\2\u00e2\u00e3\7p\2\2"+
		"\u00e3\u00e4\7i\2\2\u00e4N\3\2\2\2\u00e5\u00e6\t\2\2\2\u00e6\u00e7\t\3"+
		"\2\2\u00e7\u00e8\t\4\2\2\u00e8\u00e9\t\5\2\2\u00e9\u00ea\t\6\2\2\u00ea"+
		"\u00eb\t\3\2\2\u00ebP\3\2\2\2\u00ec\u00ed\t\7\2\2\u00ed\u00ee\t\4\2\2"+
		"\u00ee\u00ef\t\b\2\2\u00ef\u00f0\t\t\2\2\u00f0\u00f1\t\n\2\2\u00f1R\3"+
		"\2\2\2\u00f2\u00f3\t\13\2\2\u00f3\u00f4\t\5\2\2\u00f4\u00f5\t\7\2\2\u00f5"+
		"\u00f6\t\4\2\2\u00f6\u00f7\t\b\2\2\u00f7\u00f8\t\t\2\2\u00f8\u00f9\t\n"+
		"\2\2\u00f9T\3\2\2\2\u00fa\u00fb\t\f\2\2\u00fb\u00fc\t\r\2\2\u00fc\u00fd"+
		"\t\13\2\2\u00fd\u00fe\t\16\2\2\u00feV\3\2\2\2\u00ff\u0100\t\16\2\2\u0100"+
		"\u0101\t\13\2\2\u0101\u0102\t\7\2\2\u0102\u0103\t\16\2\2\u0103X\3\2\2"+
		"\2\u0104\u0105\t\2\2\2\u0105\u0106\t\17\2\2\u0106\u0107\t\20\2\2\u0107"+
		"\u0108\t\7\2\2\u0108\u0109\t\4\2\2\u0109\u010a\t\b\2\2\u010a\u010b\t\t"+
		"\2\2\u010b\u010c\t\n\2\2\u010cZ\3\2\2\2\u010d\u010e\t\17\2\2\u010e\u010f"+
		"\t\f\2\2\u010f\u0110\t\6\2\2\u0110\u0111\t\r\2\2\u0111\u0112\t\21\2\2"+
		"\u0112\u0113\t\16\2\2\u0113\u0114\t\4\2\2\u0114\\\3\2\2\2\u0115\u0116"+
		"\t\r\2\2\u0116\u0117\t\f\2\2\u0117\u0118\t\22\2\2\u0118\u0119\t\23\2\2"+
		"\u0119^\3\2\2\2\u011a\u011e\t\24\2\2\u011b\u011d\t\25\2\2\u011c\u011b"+
		"\3\2\2\2\u011d\u0120\3\2\2\2\u011e\u011c\3\2\2\2\u011e\u011f\3\2\2\2\u011f"+
		"`\3\2\2\2\u0120\u011e\3\2\2\2\u0121\u0123\5%\23\2\u0122\u0121\3\2\2\2"+
		"\u0122\u0123\3\2\2\2\u0123\u0125\3\2\2\2\u0124\u0126\5g\64\2\u0125\u0124"+
		"\3\2\2\2\u0126\u0127\3\2\2\2\u0127\u0125\3\2\2\2\u0127\u0128\3\2\2\2\u0128"+
		"b\3\2\2\2\u0129\u012b\5%\23\2\u012a\u0129\3\2\2\2\u012a\u012b\3\2\2\2"+
		"\u012b\u012d\3\2\2\2\u012c\u012e\5g\64\2\u012d\u012c\3\2\2\2\u012e\u012f"+
		"\3\2\2\2\u012f\u012d\3\2\2\2\u012f\u0130\3\2\2\2\u0130\u0131\3\2\2\2\u0131"+
		"\u0135\7\60\2\2\u0132\u0134\5g\64\2\u0133\u0132\3\2\2\2\u0134\u0137\3"+
		"\2\2\2\u0135\u0133\3\2\2\2\u0135\u0136\3\2\2\2\u0136\u0142\3\2\2\2\u0137"+
		"\u0135\3\2\2\2\u0138\u013a\5%\23\2\u0139\u0138\3\2\2\2\u0139\u013a\3\2"+
		"\2\2\u013a\u013b\3\2\2\2\u013b\u013d\7\60\2\2\u013c\u013e\5g\64\2\u013d"+
		"\u013c\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u013d\3\2\2\2\u013f\u0140\3\2"+
		"\2\2\u0140\u0142\3\2\2\2\u0141\u012a\3\2\2\2\u0141\u0139\3\2\2\2\u0142"+
		"d\3\2\2\2\u0143\u0145\7/\2\2\u0144\u0143\3\2\2\2\u0144\u0145\3\2\2\2\u0145"+
		"\u015a\3\2\2\2\u0146\u0148\7\60\2\2\u0147\u0149\5g\64\2\u0148\u0147\3"+
		"\2\2\2\u0149\u014a\3\2\2\2\u014a\u0148\3\2\2\2\u014a\u014b\3\2\2\2\u014b"+
		"\u015b\3\2\2\2\u014c\u014e\5g\64\2\u014d\u014c\3\2\2\2\u014e\u014f\3\2"+
		"\2\2\u014f\u014d\3\2\2\2\u014f\u0150\3\2\2\2\u0150\u0158\3\2\2\2\u0151"+
		"\u0155\7\60\2\2\u0152\u0154\5g\64\2\u0153\u0152\3\2\2\2\u0154\u0157\3"+
		"\2\2\2\u0155\u0153\3\2\2\2\u0155\u0156\3\2\2\2\u0156\u0159\3\2\2\2\u0157"+
		"\u0155\3\2\2\2\u0158\u0151\3\2\2\2\u0158\u0159\3\2\2\2\u0159\u015b\3\2"+
		"\2\2\u015a\u0146\3\2\2\2\u015a\u014d\3\2\2\2\u015bf\3\2\2\2\u015c\u015d"+
		"\t\26\2\2\u015dh\3\2\2\2\u015e\u0164\7$\2\2\u015f\u0160\7^\2\2\u0160\u0163"+
		"\7$\2\2\u0161\u0163\13\2\2\2\u0162\u015f\3\2\2\2\u0162\u0161\3\2\2\2\u0163"+
		"\u0166\3\2\2\2\u0164\u0165\3\2\2\2\u0164\u0162\3\2\2\2\u0165\u0167\3\2"+
		"\2\2\u0166\u0164\3\2\2\2\u0167\u0168\7$\2\2\u0168j\3\2\2\2\u0169\u016a"+
		"\t\27\2\2\u016al\3\2\2\2\u016b\u016c\7\61\2\2\u016c\u016d\7,\2\2\u016d"+
		"\u0171\3\2\2\2\u016e\u0170\13\2\2\2\u016f\u016e\3\2\2\2\u0170\u0173\3"+
		"\2\2\2\u0171\u0172\3\2\2\2\u0171\u016f\3\2\2\2\u0172\u0174\3\2\2\2\u0173"+
		"\u0171\3\2\2\2\u0174\u0175\7,\2\2\u0175\u0176\7\61\2\2\u0176\u0177\3\2"+
		"\2\2\u0177\u0178\b\67\2\2\u0178n\3\2\2\2\u0179\u017a\7\61\2\2\u017a\u017b"+
		"\7\61\2\2\u017b\u017f\3\2\2\2\u017c\u017e\13\2\2\2\u017d\u017c\3\2\2\2"+
		"\u017e\u0181\3\2\2\2\u017f\u0180\3\2\2\2\u017f\u017d\3\2\2\2\u0180\u0183"+
		"\3\2\2\2\u0181\u017f\3\2\2\2\u0182\u0184\7\17\2\2\u0183\u0182\3\2\2\2"+
		"\u0183\u0184\3\2\2\2\u0184\u0185\3\2\2\2\u0185\u0186\7\f\2\2\u0186\u0187"+
		"\3\2\2\2\u0187\u0188\b8\3\2\u0188p\3\2\2\2\u0189\u018b\t\30\2\2\u018a"+
		"\u0189\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u018a\3\2\2\2\u018c\u018d\3\2"+
		"\2\2\u018d\u018e\3\2\2\2\u018e\u018f\b9\4\2\u018fr\3\2\2\2\30\2\u011e"+
		"\u0122\u0127\u012a\u012f\u0135\u0139\u013f\u0141\u0144\u014a\u014f\u0155"+
		"\u0158\u015a\u0162\u0164\u0171\u017f\u0183\u018c";
	public static final ATN _ATN =
		ATNSimulator.deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}